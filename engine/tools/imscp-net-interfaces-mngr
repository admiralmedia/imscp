#!/usr/bin/perl

# i-MSCP - internet Multi Server Control Panel
# Copyright (C) 2010-2014 by internet Multi Server Control Panel
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
# @category    i-MSCP
# @copyright   2010-2014 by i-MSCP | http://i-mscp.net
# @author      Laurent Declercq <l.declercq@nuxwin.com>
# @link        http://i-mscp.net i-MSCP Home Site
# @license     http://www.gnu.org/licenses/gpl-2.0.html GPL v2

use strict;
use warnings;

use FindBin;
use lib "$FindBin::Bin/..", "$FindBin::Bin/../PerlLib", "$FindBin::Bin/../PerlVendor";

use iMSCP::Debug;
use iMSCP::Bootstrapper;
use iMSCP::Database;
use iMSCP::Net;
use iMSCP::Getopt;
use File::Basename;

# Turn off localisation features to force any command output to be in English
$ENV{'LC_MESSAGES'} = 'C';

# Do not clear screen at end of script
$ENV{'IMSCP_CLEAR_SCREEN'} = 0;

newDebug('imscp-net-interfaces-mngr.log');

# Parse command line options
iMSCP::Getopt->parseNoDefault(sprintf("Usage: perl %s [OPTION]... start|restart|stop", basename($0)) . qq {

Script which start/restart/stop i-MSCP network interfaces.

OPTIONS:
 -v,    --verbose       Enable verbose mode.},
 'verbose|v' => sub { setVerbose(@_); }
);

iMSCP::Bootstrapper->getInstance()->boot(
	{ 'nolock' => 'yes', 'norequirements' => 'yes', 'config_readonly' => 'yes' }
);

sub _addAddresses
{
	my $rs = 0;

	my $rdata = iMSCP::Database->factory()->doQuery('ip_number', 'SELECT ip_number, ip_card FROM server_ips');
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		$rs = 1;
	} elsif(%{$rdata}) {
		my $net = iMSCP::Net->getInstance();

		for my $addr(reverse(sort(keys %{$rdata}))){
			unless($net->isKnownAddr($addr)) {
				my $dev = $rdata->{$addr}->{'ip_card'};

				if($net->isKnownDevice($dev)) {
					$rs |= $net->upDevice($dev) unless $net->isDeviceUp($dev);
					$rs |= $net->addAddr($addr, $dev);
				} else {
					error("Network device $dev doesn't exist. Please rerun the setup script to fix this.");
					$rs |= 1;
				}
			}
		}
	}

	$rs;
}

sub _removeAddresses
{
	my $rs = 0;

	my $rdata = iMSCP::Database->factory()->doQuery(
		'ip_number', "SELECT ip_number FROM server_ips WHERE ip_number <> '$main::imscpConfig{'BASE_SERVER_IP'}'"
	);
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		$rs = 1;
	} elsif(%{$rdata}) {
		my $net = iMSCP::Net->getInstance();
		$rs |= $net->delAddr($_) for keys %{$rdata};
	}

	$rs;
}

sub run
{
	my $action = $ARGV[0] || '';
	my $rs = 0;

	if ($action eq 'start') {
		$rs = _addAddresses();
	} elsif ($action eq 'restart') {
		$rs = _removeAddresses();
		$rs |= _addAddresses();
	} elsif ($action eq 'stop') {
		$rs = _removeAddresses();
	} else {
		iMSCP::Getopt->showUsage();
	}

	my $db = iMSCP::Database->factory();

	my $rdata = $db->doQuery('dummy', "DELETE FROM server_ips WHERE ip_status = 'todelete'");
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		$rs = 1;
	}

	$rdata = $db->doQuery('dummy', "UPDATE server_ips SET ip_status = 'ok'");
	unless (ref $rdata eq 'HASH') {
		error($rdata);
		$rs |= 1;
	}

	if($rs) {
		require iMSCP::Mail;
		iMSCP::Mail->new()->errmsg(join "\n\n", iMSCP::Debug::getLastError());
	}

	$rs;
}

exit run();
